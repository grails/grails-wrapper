buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
        if (groovyVersion.endsWith('-SNAPSHOT')) {
            maven {
                name 'JFrog OSS snapshot repo'
                url 'https://oss.jfrog.org/oss-snapshot-local/'
            }
        }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVerison"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE'
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
        classpath "com.bmuschko:gradle-nexus-plugin:2.3.1"
    }
}

group 'org.grails'
version project.projectVersion

ext.isSnapshot = version.endsWith("-SNAPSHOT")
ext.isReleaseVersion = !ext.isSnapshot
ext."signing.keyId" = System.getenv("SIGNING_KEY") ?: project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : null
ext."signing.password" = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signing.password") ? project.getProperty('signing.password') : null
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : null

ext.pomInfo = {
    delegate.name 'Grails 5 Wrapper'
    delegate.description 'The Grails Wrapper Project'
    delegate.url 'https://github.com/grails/grails-wrapper'

    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:grails/grails-wrapper.git"
        delegate.connection "scm:git@github.com:grails/grails-wrapper.git"
        delegate.developerConnection "scm:git@github.com:grails/grails-wrapper.git"
    }

    delegate.developers {
        delegate.developer {
            delegate.id 'graemerocher'
            delegate.name 'Graeme Rocher'
        }
        delegate.developer {
            delegate.id 'jeffscottbrown'
            delegate.name 'Jeff Brown'
        }
        delegate.developer {
            delegate.id 'puneetbehl'
            delegate.name 'Puneet Behl'
        }
    }
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'provided-base'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "io.spring.dependency-management"

if (isReleaseVersion) {
    apply plugin: "io.github.gradle-nexus.publish-plugin"
}

ext {
    grailsVersion = project.grailsVersion
    userOrg = 'grails'
    repo = 'grails-core'
}

configurations {
    groovyDoc.extendsFrom runtimeClasspath
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    if (groovyVersion.endsWith('-SNAPSHOT')) {
        maven {
            name 'JFrog OSS snapshot repo'
            url 'https://oss.jfrog.org/oss-snapshot-local/'
        }
    }
}

dependencies {
    implementation "org.codehaus.groovy:groovy:$groovyVersion"
    implementation "org.springframework.boot:spring-boot-cli:$springBootVersion"
    implementation "org.codehaus.groovy:groovy-ant:$groovyVersion"
}

jar {
    from {
        (configurations.runtimeClasspath).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'grails.init.RunCommand'
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from project.sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from groovydoc.outputs
}

tasks.withType(Groovydoc) {
    groovyClasspath = project.configurations.groovyDoc
    includes = ["grails-wrapper/**"]
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}

tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
    shouldRunAfter(tasks.withType(Sign))
}

if (isReleaseVersion) {
    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

apply from:'../publishing/grailsCentralPublishing.gradle'


